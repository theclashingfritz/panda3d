##############################################################                                                     ###### Panda3D Configuration File -  User-Editable Portion ######                                                     ############################################################### Uncomment one of the following lines to choose whether you should# run using OpenGL, DirectX or TinyPanda (software) rendering.# There can only be one load-display line, but you can use# multiple aux-display lines to specify fallback modules.# When the module indicated by load-display fails, it will fall# back to the next display module indicated by aux-display,# when that fails, the next aux-display line, and so on.load-display pandagl#load-display pandadx9#load-display pandagles#load-display p3tinydisplay# These control the placement and size of the default rendering window.# A value of -2 for the origin means to center it on the screen,# while -1 lets the window manager choose the position.win-origin -2 -2win-size 800 600# Uncomment this line if you want to run Panda fullscreen instead of# in a window.fullscreen #f# The framebuffer-hardware flag forces it to use an accelerated driver.# The framebuffer-software flag forces it to use a software renderer.# If you set both to false, it will use whatever's available.framebuffer-hardware #tframebuffer-software #f# These set the minimum requirements for the framebuffer.# A value of 1 means: get as many bits as possible,# consistent with the other framebuffer requirements.depth-bits 1color-bits 1 1 1alpha-bits 0stencil-bits 0multisamples 0# These control the amount of output Panda gives for some various# categories.  The severity levels, in order, are "spam", "debug",# "info", "warning", and "error"; the default is "info".  Uncomment# one (or define a new one for the particular category you wish to# change) to control this output.notify-level warningdefault-directnotify-level warning# These specify where model files may be loaded from.  You probably# want to set this to a sensible path for yourself.  $THIS_PRC_DIR is# a special variable that indicates the same directory as this# particular Config.prc file.model-path    $MAIN_DIRmodel-path    $THIS_PRC_DIR/..model-path    $THIS_PRC_DIR/../models# This enable the automatic creation of a TK window when running# Direct.want-directtools  #fwant-tk           #f# Enable/disable performance profiling tool and frame-rate meterwant-pstats            #fshow-frame-rate-meter  #f# Enable audio using the OpenAL audio library by default:audio-library-name p3openal_audio# Enable the use of the new movietexture class.use-movietexture #t# The new version of panda supports hardware vertex animation, but it's not quite readyhardware-animated-vertices #f# Enable the model-cache, but only for models, not textures.model-cache-dir $XDG_CACHE_HOME/panda3dmodel-cache-textures #f# This option specifies the default profiles for Cg shaders.# Setting it to #t makes them arbvp1 and arbfp1, since these# seem to be most reliable. Setting it to #f makes Panda use# the latest profile available.basic-shaders-only #f# The following lines define some handy object types to use within the# egg syntax.  This remaps <ObjectType> { name } into whatever egg# syntax is given by egg-object-type-name, which makes a handy# abbreviation for modeling packages (like Maya) to insert# sophisticated egg syntax into the generated egg file, using a single# object type string.egg-object-type-portal          <Scalar> portal { 1 }egg-object-type-polylight       <Scalar> polylight { 1 }egg-object-type-seq24           <Switch> { 1 } <Scalar> fps { 24 }egg-object-type-seq12           <Switch> { 1 } <Scalar> fps { 12 }egg-object-type-indexed         <Scalar> indexed { 1 }egg-object-type-seq10           <Switch> { 1 } <Scalar> fps { 10 }egg-object-type-seq8            <Switch> { 1 } <Scalar> fps { 8 }egg-object-type-seq6            <Switch> { 1 } <Scalar>  fps { 6 }egg-object-type-seq4            <Switch> { 1 } <Scalar>  fps { 4 }egg-object-type-seq2            <Switch> { 1 } <Scalar>  fps { 2 }# These are just shortcuts to define the Model and DCS flags, which# indicate nodes that should not be flattened out of the hierarchy# during the conversion process.  DCS goes one step further and# indicates that the node's transform is important and should be# preserved (DCS stands for Dynamic Coordinate System).  Notouch is# even stronger, and means not to do any flattening below the node at# all.egg-object-type-model           <Model> { 1 }egg-object-type-dcs             <DCS> { 1 }egg-object-type-notouch         <DCS> { no_touch }egg-object-type-structdart      <Dart> { structured }# Egg Object Types -# The following define various kinds of collision geometry.  These# mark the geometry at this level and below as invisible collision# polygons, which can be used by Panda's collision system to detect# collisions more optimally than regular visible polygons.egg-object-type-ghost           <Scalar> collide-mask { 0 }egg-object-type-barrier         <Scalar> collide-mask { 0x01 } <Collide> { Polyset descend }egg-object-type-sphere          <Scalar> collide-mask { 0x01 } <Collide> { Sphere descend }egg-object-type-invsphere       <Scalar> collide-mask { 0x01 } <Collide> { InvSphere descend }egg-object-type-tube            <Scalar> collide-mask { 0x01 } <Collide> { Tube descend }egg-object-type-bubble          <Scalar> collide-mask { 0x01 } <Collide> { Sphere keep descend }egg-object-type-trigger         <Scalar> collide-mask { 0x01 } <Collide> { Polyset descend intangible }egg-object-type-trigger-sphere  <Scalar> collide-mask { 0x01 } <Collide> { Sphere descend intangible }egg-object-type-floor           <Scalar> collide-mask { 0x02 } <Collide> { Polyset descend level }egg-object-type-dupefloor       <Scalar> collide-mask { 0x02 } <Collide> { Polyset keep descend level }egg-object-type-camera-collide <Scalar> collide-mask { 0x04 } <Collide> { Polyset descend }egg-object-type-camera-collide-sphere <Scalar> collide-mask { 0x04 } <Collide> { Sphere descend }egg-object-type-camera-collide-invsphere <Scalar> collide-mask { 0x04 } <Collide> { InvSphere descend }egg-object-type-camera-collide-tube <Scalar> collide-mask { 0x04 } <Collide> { Tube descend }egg-object-type-camera-collide-floor <Scalar> collide-mask { 0x04 } <Collide> { Polyset descend }egg-object-type-camera-collide-dupefloor <Scalar> collide-mask { 0x04 } <Collide> { Polyset keep descend }egg-object-type-camera-collide-bubble <Scalar> collide-mask { 0x04 } <Collide> { Sphere keep descend }egg-object-type-camera-barrier <Scalar> collide-mask { 0x05 } <Collide> { Polyset descend }egg-object-type-camera-barrier-sphere <Scalar> collide-mask { 0x05 } <Collide> { Sphere descend }egg-object-type-camera-barrier-invsphere <Scalar> collide-mask { 0x05 } <Collide> { InvSphere descend }egg-object-type-camera-barrier-tube <Scalar> collide-mask { 0x05 } <Collide> { Tube descend }egg-object-type-camera-barrier-floor <Scalar> collide-mask { 0x05 } <Collide> { Polyset descend }egg-object-type-camera-barrier-dupefloor <Scalar> collide-mask { 0x05 } <Collide> { Polyset keep descend }egg-object-type-camera-barrier-bubble <Scalar> collide-mask { 0x05 } <Collide> { Sphere keep descend }egg-object-type-direct-widget   <Scalar> collide-mask { 0x8 } <Collide> { Polyset descend }egg-object-type-shground-tag <Tag> cam { shground }egg-object-type-ground-bin <Scalar> bin { ground }egg-object-type-draw-order-zero <Scalar> draw-order { 0 }egg-object-type-shground-ground-bin <Tag> cam { shground } <Scalar> bin { ground } <Scalar> draw-order { 0 }# "glow" is useful for halo effects and things of that ilk.  It# renders the object in add mode instead of the normal opaque mode.egg-object-type-glow            <Scalar> blend { add }egg-object-type-blend            <Scalar> alpha { blend }egg-object-type-binary          <Scalar> alpha { binary }egg-object-type-dual            <Scalar> alpha { dual }egg-object-type-glass           <Scalar> alpha { blend_no_occlude }egg-object-type-decal           <Scalar> decal { 1 }# Culling binscull-bin gui-popup 60 unsorted # Define a new cull bin that will render on top of everything else.